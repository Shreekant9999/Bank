{"name": "test_bankapp_signup_003", "status": "broken", "statusDetails": {"message": "UnboundLocalError: cannot access local variable 'msg' where it is not associated with a value", "trace": "self = <pageObjects.SignUp_Page.SignUp_Class object at 0x000002954859E7B0>\n\n    def Verify_SuccessMessage(self):\n        try:\n>           msg = self.driver.find_element(By.XPATH, self.success_message_xpath)\n\npageObjects\\SignUp_Page.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000295485F2120>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF66D83A1A9]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9D1D2259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF9D2C2AF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//div[@id='successMessage']\"}\nE         (Session info: chrome=131.0.6778.140); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66D8D6CC5+28821]\nE       \t(No symbol) [0x00007FF66D843850]\nE       \t(No symbol) [0x00007FF66D6E578A]\nE       \t(No symbol) [0x00007FF66D7391BE]\nE       \t(No symbol) [0x00007FF66D7394AC]\nE       \t(No symbol) [0x00007FF66D782647]\nE       \t(No symbol) [0x00007FF66D75F33F]\nE       \t(No symbol) [0x00007FF66D77F412]\nE       \t(No symbol) [0x00007FF66D75F0A3]\nE       \t(No symbol) [0x00007FF66D72A778]\nE       \t(No symbol) [0x00007FF66D72B8E1]\nE       \tGetHandleVerifier [0x00007FF66DC0FCCD+3408029]\nE       \tGetHandleVerifier [0x00007FF66DC2743F+3504143]\nE       \tGetHandleVerifier [0x00007FF66DC1B61D+3455469]\nE       \tGetHandleVerifier [0x00007FF66D99BDCB+835995]\nE       \t(No symbol) [0x00007FF66D84EB6F]\nE       \t(No symbol) [0x00007FF66D84A824]\nE       \t(No symbol) [0x00007FF66D84A9BD]\nE       \t(No symbol) [0x00007FF66D83A1A9]\nE       \tBaseThreadInitThunk [0x00007FF9D1D2259D+29]\nE       \tRtlUserThreadStart [0x00007FF9D2C2AF38+40]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testCases.test_user_profile_001.Test_Login01 object at 0x00000295484C75C0>\nfaker = <faker.generator.Generator object at 0x0000029548517B10>\n\n    def test_bankapp_signup_003(self, faker):\n        self.driver.get(self.sign_up_url)\n        sp = SignUp_Class(self.driver)\n        username = faker.name()\n        print(f\"Username: {username}\")\n        sp.EnterUserName(username)\n        sp.EnterPassword(\"Admin@123\")\n        phone_number = faker.phone_number()\n        print(f\"phone_number: {faker.phone_number()}\")\n        print(f\"Number generated by function {generate_random_phone_number()}\")\n        sp.EnterPhone(phone_number)\n        email = faker.email()\n        print(f\"email: {email}\")\n        sp.EnterEmail(email)\n         # scroll into view\n        sp.ClickCreateUserButton()\n        time.sleep(2)\n>       if sp.Verify_SuccessMessage() == \"signup_pass\":\n\ntestCases\\test_user_profile_001.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pageObjects.SignUp_Page.SignUp_Class object at 0x000002954859E7B0>\n\n    def Verify_SuccessMessage(self):\n        try:\n            msg = self.driver.find_element(By.XPATH, self.success_message_xpath)\n            print(msg.text)\n            return \"signup_pass\"\n        except:\n>           print(msg.text)\nE           UnboundLocalError: cannot access local variable 'msg' where it is not associated with a value\n\npageObjects\\SignUp_Page.py:38: UnboundLocalError"}, "attachments": [{"name": "stdout", "source": "c091a394-13e3-4170-8045-c29f91111405-attachment.txt", "type": "text/plain"}], "start": 1734518259118, "stop": 1734518280031, "uuid": "bb06c0fe-0b03-4bb7-a8d6-87e7919708bf", "historyId": "69a8f8471eb49867a034747bfb073409", "testCaseId": "69a8f8471eb49867a034747bfb073409", "fullName": "testCases.test_user_profile_001.Test_Login01#test_bankapp_signup_003", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_user_profile_001"}, {"name": "subSuite", "value": "Test_Login01"}, {"name": "host", "value": "Shree"}, {"name": "thread", "value": "16700-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_user_profile_001"}]}